<div class="max-w-4xl mx-auto px-4 py-8">
  <h1 class="text-3xl font-bold mb-6 text-indigo-700">OpenAI Realtime API - WebSocket Server Demo</h1>
  
  <div class="bg-white rounded-lg shadow-lg p-6 mb-8">
    <p class="mb-4">This demo demonstrates server-side WebSocket connections to the OpenAI Realtime API using Rails and Action Cable. This is suitable for server-to-server scenarios where you want to maintain the connection on your server.</p>
    
    <div class="mt-6 mb-6">
      <%= form_with url: "#", method: :post, data: { controller: "turbo-frame", action: "submit->turbo-frame#submitEnd" } do |form| %>
        <div class="mb-4">
          <label for="prompt-input" class="block text-sm font-medium text-gray-700 mb-1">Your message:</label>
          <input type="text" 
                 id="prompt-input" 
                 name="prompt" 
                 class="w-full px-4 py-2 border rounded-md focus:ring-indigo-500 focus:border-indigo-500" 
                 placeholder="Type your message here..." />
        </div>
        
        <div class="flex flex-row gap-3">
          <button type="submit" 
                  class="bg-indigo-600 hover:bg-indigo-700 text-white font-medium py-2 px-4 rounded-md transition">
            Send Message
          </button>
          
          <button id="start-recording-btn" 
                  class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition">
            Start Recording
          </button>
          
          <button id="stop-recording-btn" 
                  class="bg-red-600 hover:bg-red-700 text-white font-medium py-2 px-4 rounded-md transition"
                  disabled>
            Stop Recording
          </button>
        </div>
      <% end %>
    </div>
    
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mt-8">
      <div class="bg-gray-50 p-4 rounded-md">
        <h3 class="text-lg font-semibold mb-2">User Input</h3>
        <div id="user-input-display" class="text-gray-700 min-h-[100px] whitespace-pre-wrap"></div>
      </div>
      
      <div class="bg-gray-50 p-4 rounded-md">
        <h3 class="text-lg font-semibold mb-2">AI Response</h3>
        <div id="ai-response-display" class="text-gray-700 min-h-[100px] whitespace-pre-wrap"></div>
      </div>
    </div>
  </div>
  
  <div class="bg-white rounded-lg shadow-lg p-6">
    <h2 class="text-xl font-semibold mb-4">Connection Instructions</h2>
    <div class="prose">
      <p>This example shows how to establish a WebSocket connection from your server to OpenAI's Realtime API.</p>
      <p>Key components:</p>
      <ul>
        <li>Server-side WebSocket connection using <code>websocket-client-simple</code> gem</li>
        <li>Audio data handling through binary WebSocket frames</li>
        <li>Rails ActionCable for client-server communication</li>
      </ul>
      
      <p class="mt-4 font-medium">Implementation Details:</p>
      <pre class="bg-gray-100 p-3 rounded-md overflow-x-auto text-sm">
# Server-side WebSocket connection to OpenAI
ws = WebSocket::Client::Simple.connect(url, {
  headers: {
    'Authorization' => "Bearer #{api_key}",
    'OpenAI-Beta' => 'realtime=v1'
  }
})

# Send audio data
binary_audio_data = File.read('audio.wav')
ws.send(binary_audio_data, type: :binary)

# Handle text events
ws.on :message do |message|
  data = JSON.parse(message.data.to_s)
  # Process the event based on its type
end</pre>
    </div>
  </div>
</div>

<%= content_for :scripts do %>
<script>
  // Audio recording functionality
  document.addEventListener('DOMContentLoaded', function() {
    let mediaRecorder;
    let audioChunks = [];
    
    const startBtn = document.getElementById('start-recording-btn');
    const stopBtn = document.getElementById('stop-recording-btn');
    const userInputDisplay = document.getElementById('user-input-display');
    const aiResponseDisplay = document.getElementById('ai-response-display');
    
    startBtn.addEventListener('click', async function(event) {
      event.preventDefault();
      
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        mediaRecorder = new MediaRecorder(stream);
        
        mediaRecorder.ondataavailable = function(e) {
          audioChunks.push(e.data);
        };
        
        mediaRecorder.onstop = async function() {
          const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
          const audioUrl = URL.createObjectURL(audioBlob);
          
          // Create a FormData object to send the audio
          const formData = new FormData();
          formData.append('audio', audioBlob, 'recording.wav');
          
          // Display recording status
          userInputDisplay.textContent = 'Processing audio...';
          
          try {
            // Send the audio recording to the server
            const response = await fetch('/realtime/process_audio', {
              method: 'POST',
              body: formData
            });
            
            const result = await response.json();
            userInputDisplay.textContent = result.transcript || 'No transcript available';
            
            if (result.ai_response) {
              aiResponseDisplay.textContent = result.ai_response;
            }
          } catch (error) {
            userInputDisplay.textContent = `Error: ${error.message}`;
          }
          
          // Reset for next recording
          audioChunks = [];
        };
        
        // Start recording
        mediaRecorder.start();
        startBtn.disabled = true;
        stopBtn.disabled = false;
        userInputDisplay.textContent = 'Recording...';
        
      } catch (error) {
        console.error('Error accessing microphone:', error);
        userInputDisplay.textContent = `Error: ${error.message}`;
      }
    });
    
    stopBtn.addEventListener('click', function(event) {
      event.preventDefault();
      
      if (mediaRecorder && mediaRecorder.state !== 'inactive') {
        mediaRecorder.stop();
        startBtn.disabled = false;
        stopBtn.disabled = true;
      }
    });
  });
</script>
<% end %>
